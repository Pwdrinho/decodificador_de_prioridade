-------------------------------------------------------
--|               /TABELA VERDADE U.L.A\              |
--|Operação  | S¹S° | F³F²F¹F° |   Over   |   C_out   |
--|Soma (A,B)|  00  |  A + B   | overflow | carry out |
--|Subt (A,B)|  01  |  A - B   | overflow | carry out |
--|AND  (A,B)|  10  |  A AND B |    X     |     X     |
--|OR   (A,B)|  11  |  A OR B  |    X     |     X     |
-------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.numeric_std.ALL;

entity ula is
	Port (
		A     : in  STD_LOGIC_VECTOR (3 dowto 0);
		B     : in  STD_LOGIC_VECTOR (3 dowto 0);
		SS    : in  STD_LOGIC_VECTOR (1 dowto 0);
		F     : out STD_LOGIC_VECTOR (3 dowto 0);
		over  : out STD_LOGIC;
		c_out : out STD_LOGIC
	);
END ula;

architecture Behavioral of ula is
    signal result : STD_LOGIC_VECTOR(4 downto 0);  -- 1 bit a mais para carry
    signal signed_A, signed_B : SIGNED(3 downto 0);
    signal signed_result : SIGNED(4 downto 0);
begin

    process(A, B, SS)
    begin
        signed_A <= SIGNED(A);
        signed_B <= SIGNED(B);
        case SS is
            when "00" =>  -- Soma
                result <= ('0' & A) + ('0' & B);
                signed_result <= ('0' & signed_A) + ('0' & signed_B);
                F <= result(3 downto 0);
                c_out <= result(4);
                -- Overflow ocorre se o sinal do resultado difere dos operandos
                over <= '1' when (signed_A(3) = signed_B(3)) and (signed_result(4) /= signed_A(3)) else '0';

            when "01" =>  -- Subtração
                result <= ('0' & A) - ('0' & B);
                signed_result <= ('0' & signed_A) - ('0' & signed_B);
                F <= result(3 downto 0);
                c_out <= result(4);
                over <= '1' when (signed_A(3) /= signed_B(3)) and (signed_result(4) /= signed_A(3)) else '0';

            when "10" =>  -- AND
                F <= A and B;
                over <= '0';  -- don't care
                c_out <= '0';

            when "11" =>  -- OR
                F <= A or B;
                over <= '0';  -- don't care
                c_out <= '0';

            when others =>
                F <= (others => '0');
                over <= '0';
                c_out <= '0';
        end case;
    end process;

end Behavioral;
