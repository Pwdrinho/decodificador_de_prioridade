library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity cronometro is
    Port (
        clk       : in  STD_LOGIC;            -- Clock da placa (ex: 50MHz)
        rst_n     : in  STD_LOGIC;            -- Reset ativo em nível baixo
        start_n   : in  STD_LOGIC;            -- Start/Stop ativo em nível baixo
        anodos    : out STD_LOGIC_VECTOR(2 downto 0);  -- Controle de anodo dos 3 displays (invertido)
        segmentos : out STD_LOGIC_VECTOR(6 downto 0)   -- Saída para os segmentos A-G (invertido)
    );
end cronometro;

architecture Behavioral of cronometro is

    signal contador_1s : integer range 0 to 49_999_999 := 0;  -- Divisor de clock (assumindo 50MHz)
    signal enable_1s   : STD_LOGIC := '0';

    signal running     : STD_LOGIC := '0';
    signal minutos     : integer range 0 to 9 := 0;
    signal segundos    : integer range 0 to 59 := 0;

    signal digito      : integer range 0 to 2 := 0;  -- Mux do display
    signal valor_disp  : integer range 0 to 9 := 0;

    signal segmentos_raw : STD_LOGIC_VECTOR(6 downto 0);

    -- Códigos 7 segmentos padrão (0 a 9) - comum ânodo (invertido depois)
    type tabela_segmentos is array (0 to 9) of STD_LOGIC_VECTOR(6 downto 0);
    constant cod_7seg : tabela_segmentos := (
        "0000001", -- 0
        "1001111", -- 1
        "0010010", -- 2
        "0000110", -- 3
        "1001100", -- 4
        "0100100", -- 5
        "0100000", -- 6
        "0001111", -- 7
        "0000000", -- 8
        "0000100"  -- 9
    );

begin

    -- Divisor de clock: gera pulso de 1s
    process(clk)
    begin
        if rising_edge(clk) then
            if contador_1s = 49_999_999 then
                contador_1s <= 0;
                enable_1s <= '1';
            else
                contador_1s <= contador_1s + 1;
                enable_1s <= '0';
            end if;
        end if;
    end process;

    -- Controle de start/stop com lógica invertida (borda de descida)
    process(clk)
        variable prev_start : STD_LOGIC := '1';
    begin
        if rising_edge(clk) then
            if rst_n = '0' then
                running <= '0';
            elsif prev_start = '1' and start_n = '0' then
                running <= not running;
            end if;
            prev_start := start_n;
        end if;
    end process;

    -- Lógica de contagem
    process(clk)
    begin
        if rising_edge(clk) then
            if rst_n = '0' then
                minutos  <= 0;
                segundos <= 0;
            elsif enable_1s = '1' and running = '1' then
                if segundos = 59 then
                    segundos <= 0;
                    if minutos < 9 then
                        minutos <= minutos + 1;
                    end if;
                else
                    segundos <= segundos + 1;
                end if;
            end if;
        end if;
    end process;

    -- Multiplexação dos displays
    process(clk)
    begin
        if rising_edge(clk) then
            digito <= (digito + 1) mod 3;
        end if;
    end process;

    process(digito, minutos, segundos)
    begin
        case digito is
            when 0 => valor_disp <= minutos;
            when 1 => valor_disp <= segundos / 10;
            when 2 => valor_disp <= segundos mod 10;
            when others => valor_disp <= 0;
        end case;
    end process;

    segmentos_raw <= cod_7seg(valor_disp);
    segmentos <= not segmentos_raw; -- Inverter para lógica invertida

    -- Controle dos anodos (ativo em 0)
    anodos <= "111";
    anodos(digito) <= '0';

end Behavioral;